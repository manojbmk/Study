Key terms:
* It is interpreted language as it needs to compile and execute for every run, because of this it is slow.
* dir()
*__builtins__ -- Gives the builtin keywords
*__mro__ -- Method resolution order 
* / - exact quotient, // - quotient ( without decimal), % - remainder
* Python Order precedence ( PEMDAS ) - (high) Parantheses () -> Exponents ** -> Multiplication & Division *,/,//,% -> Addition & Subtraction +,- ( low )
* is & == differ in memory locations. "==" is True if the values are equal but 'is' shows True only if the values are equal and their address are same.
* List, tuple, set - clear function removes all values but the list exists ( list.clear()) but del function removes all the values and deletes the list as well ( del list)
* list.count(arg) - To display the frequency of arg occurance
* In functions *args is defined for multiple no of arguments (values in a tuple) & **kwargs is defined for naming the multiple values provided in *args. ( similar to key,value pairs)
*__init__ - it is a function which is close to constuctor functionality. 
* It is not possible to create multiple __init__ methods. If created latest method is taken in to consideration.
* If there are multiple functions with same function defination in the class & it's inherited classes, which method is called first ( using __mro__ ) is the valid function* super() is used to call the __init__ function of parent class. In case of multiple Inheritance class name has to be used as stated in super_class.py
* Composition ( part of ) is where the child object is dependent of parent objet and Aggregation ( has/or ) is where the child object is independent of parent object.
* To use abstract class we need to import ABC,abstractmethods.
* Use ( import builtins;help(builtins)) to list all the Exceptions present in Python.
* In file handling , if a file is opened with 'r' mode with file not existing then it throws an error and if it opened with 'w' mode it will create a file if it doesn't exists and overwrite the file if it exists.
* Default mode in file handling is 'r' mode.
* fp.readlines() returns a list 
* Python Iterators: An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon.
* Python generators are a simple way of creating iterators. ... Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time)
* Iterators are not memory efficient for large chunk of data as it dumps all the data to the list_variable at once, where as generators are memory efficient because they fetch the data and display for each iteration ( one by one).
* generators are good in pratice while using streaming concepts.
* super keyword -- The super keyword refers to superclass (parent) objects. It is used to call superclass methods, and to access the superclass constructor. The most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name.
* If a function has 'yield' keyword it is called as generator method.
* In return statement, it terminates immediately ( anything can't be performed after return statement). But yield statement pauses the method. 
* Decorators - Decorators wraps a function and modify its behaviour in one way or the another without having to directly change the source code of the function being decorated. 
* We can use multiple decorators for a method.
* Python is a multi paradigm language and it supports functional programming and Lambda functions come under functionality programming.
* Map - map() is a built-in function that allows you to process and transform all the items in an iterable without using an explicit for loop, a technique commonly known as mapping.
* Filter - The filter() method constructs an iterator from elements of an iterable for which a function returns true. In simple words, filter() method filters the given iterable with the help of a function that tests each element in the iterable to be true or not.
* Reduce - Python's reduce() is a function that implements a mathematical technique called folding or reduction. reduce() is useful when you need to apply a function to an iterable and reduce it to a single cumulative value.
* Closure - A fucntion whose value depends on the return value of one or more varible which are declared outside the function.
* Every thing in Python is treated as object. 
* Operator overloading in Python is the ability of a single operator to perform more than one operation based on the class (type) of operands
* Local value has high priority than Global variable inside the function.
* The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. Use the keyword nonlocal to declare that the variable is not local.
* pdb is a debugger that is installed by default.
* Thread is a individual and separate unit of execution that is part of a process, multiple thread can work together to accomplish a common goal. 
* Threads allow the program to run tasks in parallel. 
* Thread is a lightweight process that exists inside a process.
* Diff between thread and process is that thread exists inside the process and share it resources. 
* Two different kind of threads  
    * Kernel thread  -- part of OS  
    * User thread -- not implemented in kernel 
* Threads of a process can share the memory of global variables.
* Scheduling, Resouce sharing, Synchronization are the major issues with threading. 
* thread, threading are the two modules support threads in python. 
* unit testing - It is a software tesing method by which individual units of source code are tested to determine whether they are fit to use. 
* unittest,nose,pytest are some of the testing frameworks. 
